
F407_Vet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000adc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000c84  08000c84  00010c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c94  08000c94  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000c94  08000c94  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c94  08000c94  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c94  08000c94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c98  08000c98  00010c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000024  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002968  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007b7  00000000  00000000  000229a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a8  00000000  00000000  00023158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000150  00000000  00000000  00023300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012c5  00000000  00000000  00023450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000c90  00000000  00000000  00024715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000253a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004e0  00000000  00000000  000253f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000008 	.word	0x20000008
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c6c 	.word	0x08000c6c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	08000c6c 	.word	0x08000c6c

080001e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001ec:	4b06      	ldr	r3, [pc, #24]	; (8000208 <SystemInit+0x20>)
 80001ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001f2:	4a05      	ldr	r2, [pc, #20]	; (8000208 <SystemInit+0x20>)
 80001f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	e000ed00 	.word	0xe000ed00

0800020c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800020c:	b480      	push	{r7}
 800020e:	b087      	sub	sp, #28
 8000210:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000212:	2300      	movs	r3, #0
 8000214:	613b      	str	r3, [r7, #16]
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]
 800021a:	2302      	movs	r3, #2
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	2300      	movs	r3, #0
 8000220:	60bb      	str	r3, [r7, #8]
 8000222:	2302      	movs	r3, #2
 8000224:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <SystemCoreClockUpdate+0xec>)
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	f003 030c 	and.w	r3, r3, #12
 800022e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000230:	693b      	ldr	r3, [r7, #16]
 8000232:	2b08      	cmp	r3, #8
 8000234:	d011      	beq.n	800025a <SystemCoreClockUpdate+0x4e>
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	2b08      	cmp	r3, #8
 800023a:	d844      	bhi.n	80002c6 <SystemCoreClockUpdate+0xba>
 800023c:	693b      	ldr	r3, [r7, #16]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d003      	beq.n	800024a <SystemCoreClockUpdate+0x3e>
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	2b04      	cmp	r3, #4
 8000246:	d004      	beq.n	8000252 <SystemCoreClockUpdate+0x46>
 8000248:	e03d      	b.n	80002c6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800024a:	4b2c      	ldr	r3, [pc, #176]	; (80002fc <SystemCoreClockUpdate+0xf0>)
 800024c:	4a2c      	ldr	r2, [pc, #176]	; (8000300 <SystemCoreClockUpdate+0xf4>)
 800024e:	601a      	str	r2, [r3, #0]
      break;
 8000250:	e03d      	b.n	80002ce <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000252:	4b2a      	ldr	r3, [pc, #168]	; (80002fc <SystemCoreClockUpdate+0xf0>)
 8000254:	4a2b      	ldr	r2, [pc, #172]	; (8000304 <SystemCoreClockUpdate+0xf8>)
 8000256:	601a      	str	r2, [r3, #0]
      break;
 8000258:	e039      	b.n	80002ce <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800025a:	4b27      	ldr	r3, [pc, #156]	; (80002f8 <SystemCoreClockUpdate+0xec>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	0d9b      	lsrs	r3, r3, #22
 8000260:	f003 0301 	and.w	r3, r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000266:	4b24      	ldr	r3, [pc, #144]	; (80002f8 <SystemCoreClockUpdate+0xec>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800026e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d00c      	beq.n	8000290 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000276:	4a23      	ldr	r2, [pc, #140]	; (8000304 <SystemCoreClockUpdate+0xf8>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	fbb2 f3f3 	udiv	r3, r2, r3
 800027e:	4a1e      	ldr	r2, [pc, #120]	; (80002f8 <SystemCoreClockUpdate+0xec>)
 8000280:	6852      	ldr	r2, [r2, #4]
 8000282:	0992      	lsrs	r2, r2, #6
 8000284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000288:	fb02 f303 	mul.w	r3, r2, r3
 800028c:	617b      	str	r3, [r7, #20]
 800028e:	e00b      	b.n	80002a8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000290:	4a1b      	ldr	r2, [pc, #108]	; (8000300 <SystemCoreClockUpdate+0xf4>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	fbb2 f3f3 	udiv	r3, r2, r3
 8000298:	4a17      	ldr	r2, [pc, #92]	; (80002f8 <SystemCoreClockUpdate+0xec>)
 800029a:	6852      	ldr	r2, [r2, #4]
 800029c:	0992      	lsrs	r2, r2, #6
 800029e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002a2:	fb02 f303 	mul.w	r3, r2, r3
 80002a6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <SystemCoreClockUpdate+0xec>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	0c1b      	lsrs	r3, r3, #16
 80002ae:	f003 0303 	and.w	r3, r3, #3
 80002b2:	3301      	adds	r3, #1
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002b8:	697a      	ldr	r2, [r7, #20]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <SystemCoreClockUpdate+0xf0>)
 80002c2:	6013      	str	r3, [r2, #0]
      break;
 80002c4:	e003      	b.n	80002ce <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <SystemCoreClockUpdate+0xf0>)
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <SystemCoreClockUpdate+0xf4>)
 80002ca:	601a      	str	r2, [r3, #0]
      break;
 80002cc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002ce:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <SystemCoreClockUpdate+0xec>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	091b      	lsrs	r3, r3, #4
 80002d4:	f003 030f 	and.w	r3, r3, #15
 80002d8:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <SystemCoreClockUpdate+0xfc>)
 80002da:	5cd3      	ldrb	r3, [r2, r3]
 80002dc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80002de:	4b07      	ldr	r3, [pc, #28]	; (80002fc <SystemCoreClockUpdate+0xf0>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	fa22 f303 	lsr.w	r3, r2, r3
 80002e8:	4a04      	ldr	r2, [pc, #16]	; (80002fc <SystemCoreClockUpdate+0xf0>)
 80002ea:	6013      	str	r3, [r2, #0]
}
 80002ec:	bf00      	nop
 80002ee:	371c      	adds	r7, #28
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40023800 	.word	0x40023800
 80002fc:	20000000 	.word	0x20000000
 8000300:	00f42400 	.word	0x00f42400
 8000304:	017d7840 	.word	0x017d7840
 8000308:	08000c84 	.word	0x08000c84

0800030c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	2b00      	cmp	r3, #0
 800031c:	db0b      	blt.n	8000336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	f003 021f 	and.w	r2, r3, #31
 8000324:	4907      	ldr	r1, [pc, #28]	; (8000344 <__NVIC_EnableIRQ+0x38>)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	095b      	lsrs	r3, r3, #5
 800032c:	2001      	movs	r0, #1
 800032e:	fa00 f202 	lsl.w	r2, r0, r2
 8000332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000e100 	.word	0xe000e100

08000348 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000356:	2b00      	cmp	r3, #0
 8000358:	db0c      	blt.n	8000374 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	f003 021f 	and.w	r2, r3, #31
 8000360:	4907      	ldr	r1, [pc, #28]	; (8000380 <__NVIC_ClearPendingIRQ+0x38>)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	095b      	lsrs	r3, r3, #5
 8000368:	2001      	movs	r0, #1
 800036a:	fa00 f202 	lsl.w	r2, r0, r2
 800036e:	3360      	adds	r3, #96	; 0x60
 8000370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000e100 	.word	0xe000e100

08000384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	6039      	str	r1, [r7, #0]
 800038e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000394:	2b00      	cmp	r3, #0
 8000396:	db0a      	blt.n	80003ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	b2da      	uxtb	r2, r3
 800039c:	490c      	ldr	r1, [pc, #48]	; (80003d0 <__NVIC_SetPriority+0x4c>)
 800039e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a2:	0112      	lsls	r2, r2, #4
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	440b      	add	r3, r1
 80003a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ac:	e00a      	b.n	80003c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4908      	ldr	r1, [pc, #32]	; (80003d4 <__NVIC_SetPriority+0x50>)
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	f003 030f 	and.w	r3, r3, #15
 80003ba:	3b04      	subs	r3, #4
 80003bc:	0112      	lsls	r2, r2, #4
 80003be:	b2d2      	uxtb	r2, r2
 80003c0:	440b      	add	r3, r1
 80003c2:	761a      	strb	r2, [r3, #24]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	e000e100 	.word	0xe000e100
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <DMA1_Stream3_IRQHandler>:
volatile uint8_t rx_counter = 0;
volatile uint8_t tx_counter = 0;
uint8_t err_flag = 0;
uint8_t err_cnt = 0;

void DMA1_Stream3_IRQHandler(void){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	if((DMA1_Stream3) && (DMA_LISR_HTIF3)){
		DMA1->LIFCR |= DMA_LIFCR_CHTIF3;
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <DMA1_Stream3_IRQHandler+0x28>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <DMA1_Stream3_IRQHandler+0x28>)
 80003e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003e6:	6093      	str	r3, [r2, #8]
	}
	if((DMA1_Stream3) && (DMA_LISR_TCIF3)){
		DMA1->LIFCR |= DMA_LIFCR_CTCIF3;
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <DMA1_Stream3_IRQHandler+0x28>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <DMA1_Stream3_IRQHandler+0x28>)
 80003ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80003f2:	6093      	str	r3, [r2, #8]
	}
	NVIC_ClearPendingIRQ(DMA1_Stream3_IRQn);
 80003f4:	200e      	movs	r0, #14
 80003f6:	f7ff ffa7 	bl	8000348 <__NVIC_ClearPendingIRQ>
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40026000 	.word	0x40026000

08000404 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	if((DMA1_Stream4) && (DMA_HISR_HTIF4)){
		DMA1->HIFCR |= DMA_HIFCR_CHTIF4;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <DMA1_Stream4_IRQHandler+0x28>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	4a07      	ldr	r2, [pc, #28]	; (800042c <DMA1_Stream4_IRQHandler+0x28>)
 800040e:	f043 0310 	orr.w	r3, r3, #16
 8000412:	60d3      	str	r3, [r2, #12]
	}
	if((DMA1_Stream4) && (DMA_HISR_TCIF4)){
		DMA1->HIFCR |= DMA_HIFCR_CTCIF4;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <DMA1_Stream4_IRQHandler+0x28>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <DMA1_Stream4_IRQHandler+0x28>)
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	60d3      	str	r3, [r2, #12]
	}
	NVIC_ClearPendingIRQ(DMA1_Stream4_IRQn);
 8000420:	200f      	movs	r0, #15
 8000422:	f7ff ff91 	bl	8000348 <__NVIC_ClearPendingIRQ>
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40026000 	.word	0x40026000

08000430 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	if (READ_BIT(SPI2->SR, SPI_SR_RXNE)) {
 8000436:	4b46      	ldr	r3, [pc, #280]	; (8000550 <SPI2_IRQHandler+0x120>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	2b00      	cmp	r3, #0
 8000440:	d059      	beq.n	80004f6 <SPI2_IRQHandler+0xc6>
		uint16_t data = ((uint16_t)SPI2->DR) & 0xff;
 8000442:	4b43      	ldr	r3, [pc, #268]	; (8000550 <SPI2_IRQHandler+0x120>)
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	b29b      	uxth	r3, r3
 8000448:	b2db      	uxtb	r3, r3
 800044a:	80fb      	strh	r3, [r7, #6]
		TIM7->CNT = 0;
 800044c:	4b41      	ldr	r3, [pc, #260]	; (8000554 <SPI2_IRQHandler+0x124>)
 800044e:	2200      	movs	r2, #0
 8000450:	625a      	str	r2, [r3, #36]	; 0x24
		if (rx_counter < RX_DATA_SIZE){
 8000452:	4b41      	ldr	r3, [pc, #260]	; (8000558 <SPI2_IRQHandler+0x128>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2b01      	cmp	r3, #1
 800045a:	d83f      	bhi.n	80004dc <SPI2_IRQHandler+0xac>
			bufferIN[rx_counter++] = data;
 800045c:	4b3e      	ldr	r3, [pc, #248]	; (8000558 <SPI2_IRQHandler+0x128>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	b2d1      	uxtb	r1, r2
 8000466:	4a3c      	ldr	r2, [pc, #240]	; (8000558 <SPI2_IRQHandler+0x128>)
 8000468:	7011      	strb	r1, [r2, #0]
 800046a:	4619      	mov	r1, r3
 800046c:	4a3b      	ldr	r2, [pc, #236]	; (800055c <SPI2_IRQHandler+0x12c>)
 800046e:	88fb      	ldrh	r3, [r7, #6]
 8000470:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			if (rx_counter >= RX_DATA_SIZE) {
 8000474:	4b38      	ldr	r3, [pc, #224]	; (8000558 <SPI2_IRQHandler+0x128>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	b2db      	uxtb	r3, r3
 800047a:	2b01      	cmp	r3, #1
 800047c:	d91b      	bls.n	80004b6 <SPI2_IRQHandler+0x86>
				spi_rx_complete = 1;
 800047e:	4b38      	ldr	r3, [pc, #224]	; (8000560 <SPI2_IRQHandler+0x130>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
				rx_counter = 0;
 8000484:	4b34      	ldr	r3, [pc, #208]	; (8000558 <SPI2_IRQHandler+0x128>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
				tx_counter = 0;
 800048a:	4b36      	ldr	r3, [pc, #216]	; (8000564 <SPI2_IRQHandler+0x134>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
				SPI2->CR2 &= ~SPI_CR2_RXNEIE;
 8000490:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <SPI2_IRQHandler+0x120>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	4a2e      	ldr	r2, [pc, #184]	; (8000550 <SPI2_IRQHandler+0x120>)
 8000496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800049a:	6053      	str	r3, [r2, #4]
				SPI2->CR2 &= ~SPI_CR2_TXEIE;
 800049c:	4b2c      	ldr	r3, [pc, #176]	; (8000550 <SPI2_IRQHandler+0x120>)
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	4a2b      	ldr	r2, [pc, #172]	; (8000550 <SPI2_IRQHandler+0x120>)
 80004a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004a6:	6053      	str	r3, [r2, #4]
				CS_HIGH;
 80004a8:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <SPI2_IRQHandler+0x138>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a2e      	ldr	r2, [pc, #184]	; (8000568 <SPI2_IRQHandler+0x138>)
 80004ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	e044      	b.n	8000540 <SPI2_IRQHandler+0x110>
			}else{
				TIM7->CR1 |= TIM_CR1_CEN;
 80004b6:	4b27      	ldr	r3, [pc, #156]	; (8000554 <SPI2_IRQHandler+0x124>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a26      	ldr	r2, [pc, #152]	; (8000554 <SPI2_IRQHandler+0x124>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6013      	str	r3, [r2, #0]
				SPI2->CR2 &= ~SPI_CR2_RXNEIE;
 80004c2:	4b23      	ldr	r3, [pc, #140]	; (8000550 <SPI2_IRQHandler+0x120>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	4a22      	ldr	r2, [pc, #136]	; (8000550 <SPI2_IRQHandler+0x120>)
 80004c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004cc:	6053      	str	r3, [r2, #4]
				SPI2->CR2 |= SPI_CR2_TXEIE;
 80004ce:	4b20      	ldr	r3, [pc, #128]	; (8000550 <SPI2_IRQHandler+0x120>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	4a1f      	ldr	r2, [pc, #124]	; (8000550 <SPI2_IRQHandler+0x120>)
 80004d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d8:	6053      	str	r3, [r2, #4]
 80004da:	e031      	b.n	8000540 <SPI2_IRQHandler+0x110>
			}
		}else{
			SPI2->CR2 &= ~SPI_CR2_RXNEIE;
 80004dc:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <SPI2_IRQHandler+0x120>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <SPI2_IRQHandler+0x120>)
 80004e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004e6:	6053      	str	r3, [r2, #4]
			SPI2->CR2 |= SPI_CR2_TXEIE;
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <SPI2_IRQHandler+0x120>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	4a18      	ldr	r2, [pc, #96]	; (8000550 <SPI2_IRQHandler+0x120>)
 80004ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f2:	6053      	str	r3, [r2, #4]
 80004f4:	e024      	b.n	8000540 <SPI2_IRQHandler+0x110>
		}

	}else if (READ_BIT(SPI2->SR, SPI_SR_TXE)){
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <SPI2_IRQHandler+0x120>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d01e      	beq.n	8000540 <SPI2_IRQHandler+0x110>
		CS_LOW;
 8000502:	4b19      	ldr	r3, [pc, #100]	; (8000568 <SPI2_IRQHandler+0x138>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a18      	ldr	r2, [pc, #96]	; (8000568 <SPI2_IRQHandler+0x138>)
 8000508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800050c:	6193      	str	r3, [r2, #24]
		SPI2->DR = bufferOUT[tx_counter++];
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <SPI2_IRQHandler+0x134>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	1c5a      	adds	r2, r3, #1
 8000516:	b2d1      	uxtb	r1, r2
 8000518:	4a12      	ldr	r2, [pc, #72]	; (8000564 <SPI2_IRQHandler+0x134>)
 800051a:	7011      	strb	r1, [r2, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <SPI2_IRQHandler+0x13c>)
 8000520:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <SPI2_IRQHandler+0x120>)
 8000526:	60da      	str	r2, [r3, #12]
		SPI2->CR2 &= ~SPI_CR2_TXEIE;
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <SPI2_IRQHandler+0x120>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	4a08      	ldr	r2, [pc, #32]	; (8000550 <SPI2_IRQHandler+0x120>)
 800052e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000532:	6053      	str	r3, [r2, #4]
		SPI2->CR2 |= SPI_CR2_RXNEIE;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <SPI2_IRQHandler+0x120>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <SPI2_IRQHandler+0x120>)
 800053a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800053e:	6053      	str	r3, [r2, #4]
	}

	NVIC_ClearPendingIRQ(SPI2_IRQn);
 8000540:	2024      	movs	r0, #36	; 0x24
 8000542:	f7ff ff01 	bl	8000348 <__NVIC_ClearPendingIRQ>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40003800 	.word	0x40003800
 8000554:	40001400 	.word	0x40001400
 8000558:	20000029 	.word	0x20000029
 800055c:	20000024 	.word	0x20000024
 8000560:	20000028 	.word	0x20000028
 8000564:	2000002a 	.word	0x2000002a
 8000568:	40021000 	.word	0x40021000
 800056c:	20000004 	.word	0x20000004

08000570 <init_spi_gpio>:


void init_spi_gpio(void){
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN);
 8000574:	4b65      	ldr	r3, [pc, #404]	; (800070c <init_spi_gpio+0x19c>)
 8000576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000578:	4a64      	ldr	r2, [pc, #400]	; (800070c <init_spi_gpio+0x19c>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	6313      	str	r3, [r2, #48]	; 0x30
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);
 8000580:	4b62      	ldr	r3, [pc, #392]	; (800070c <init_spi_gpio+0x19c>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	4a61      	ldr	r2, [pc, #388]	; (800070c <init_spi_gpio+0x19c>)
 8000586:	f043 0302 	orr.w	r3, r3, #2
 800058a:	6313      	str	r3, [r2, #48]	; 0x30
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOEEN);
 800058c:	4b5f      	ldr	r3, [pc, #380]	; (800070c <init_spi_gpio+0x19c>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	4a5e      	ldr	r2, [pc, #376]	; (800070c <init_spi_gpio+0x19c>)
 8000592:	f043 0310 	orr.w	r3, r3, #16
 8000596:	6313      	str	r3, [r2, #48]	; 0x30
	/*PC3 - MOSI
	 Alternative func. = AF7(0111)
	 Very high speed
	 Pull-down*/
	GPIOC->MODER &= ~GPIO_MODER_MODER3;
 8000598:	4b5d      	ldr	r3, [pc, #372]	; (8000710 <init_spi_gpio+0x1a0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a5c      	ldr	r2, [pc, #368]	; (8000710 <init_spi_gpio+0x1a0>)
 800059e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80005a2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER3_1;
 80005a4:	4b5a      	ldr	r3, [pc, #360]	; (8000710 <init_spi_gpio+0x1a0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a59      	ldr	r2, [pc, #356]	; (8000710 <init_spi_gpio+0x1a0>)
 80005aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ae:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPD3_1;
 80005b0:	4b57      	ldr	r3, [pc, #348]	; (8000710 <init_spi_gpio+0x1a0>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a56      	ldr	r2, [pc, #344]	; (8000710 <init_spi_gpio+0x1a0>)
 80005b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ba:	60d3      	str	r3, [r2, #12]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR3;
 80005bc:	4b54      	ldr	r3, [pc, #336]	; (8000710 <init_spi_gpio+0x1a0>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	4a53      	ldr	r2, [pc, #332]	; (8000710 <init_spi_gpio+0x1a0>)
 80005c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80005c6:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR3;
 80005c8:	4b51      	ldr	r3, [pc, #324]	; (8000710 <init_spi_gpio+0x1a0>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	4a50      	ldr	r2, [pc, #320]	; (8000710 <init_spi_gpio+0x1a0>)
 80005ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005d2:	6093      	str	r3, [r2, #8]
	GPIOC->AFR[0] |= (0x5 << GPIO_AFRL_AFSEL3_Pos);
 80005d4:	4b4e      	ldr	r3, [pc, #312]	; (8000710 <init_spi_gpio+0x1a0>)
 80005d6:	6a1b      	ldr	r3, [r3, #32]
 80005d8:	4a4d      	ldr	r2, [pc, #308]	; (8000710 <init_spi_gpio+0x1a0>)
 80005da:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80005de:	6213      	str	r3, [r2, #32]

	/*PC2 - MISO
	 Alternative func. = AF7(0111)
	 Very high speed
	 Pull-down*/
	GPIOC->MODER &= ~GPIO_MODER_MODER2;
 80005e0:	4b4b      	ldr	r3, [pc, #300]	; (8000710 <init_spi_gpio+0x1a0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a4a      	ldr	r2, [pc, #296]	; (8000710 <init_spi_gpio+0x1a0>)
 80005e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80005ea:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER2_1;
 80005ec:	4b48      	ldr	r3, [pc, #288]	; (8000710 <init_spi_gpio+0x1a0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a47      	ldr	r2, [pc, #284]	; (8000710 <init_spi_gpio+0x1a0>)
 80005f2:	f043 0320 	orr.w	r3, r3, #32
 80005f6:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPD2_1;
 80005f8:	4b45      	ldr	r3, [pc, #276]	; (8000710 <init_spi_gpio+0x1a0>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4a44      	ldr	r2, [pc, #272]	; (8000710 <init_spi_gpio+0x1a0>)
 80005fe:	f043 0320 	orr.w	r3, r3, #32
 8000602:	60d3      	str	r3, [r2, #12]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR2;
 8000604:	4b42      	ldr	r3, [pc, #264]	; (8000710 <init_spi_gpio+0x1a0>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	4a41      	ldr	r2, [pc, #260]	; (8000710 <init_spi_gpio+0x1a0>)
 800060a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800060e:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2;
 8000610:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <init_spi_gpio+0x1a0>)
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	4a3e      	ldr	r2, [pc, #248]	; (8000710 <init_spi_gpio+0x1a0>)
 8000616:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800061a:	6093      	str	r3, [r2, #8]
	GPIOC->AFR[0] |= (0x5 << GPIO_AFRL_AFSEL2_Pos);
 800061c:	4b3c      	ldr	r3, [pc, #240]	; (8000710 <init_spi_gpio+0x1a0>)
 800061e:	6a1b      	ldr	r3, [r3, #32]
 8000620:	4a3b      	ldr	r2, [pc, #236]	; (8000710 <init_spi_gpio+0x1a0>)
 8000622:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000626:	6213      	str	r3, [r2, #32]

	/*PB10 - SCK
	 Alternative func. = AF7(0111)
	 Very high speed
	 Pull-down*/
	GPIOB->MODER &= ~GPIO_MODER_MODER10;
 8000628:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <init_spi_gpio+0x1a4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a39      	ldr	r2, [pc, #228]	; (8000714 <init_spi_gpio+0x1a4>)
 800062e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000632:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER10_1;
 8000634:	4b37      	ldr	r3, [pc, #220]	; (8000714 <init_spi_gpio+0x1a4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a36      	ldr	r2, [pc, #216]	; (8000714 <init_spi_gpio+0x1a4>)
 800063a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800063e:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD10_1;
 8000640:	4b34      	ldr	r3, [pc, #208]	; (8000714 <init_spi_gpio+0x1a4>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	4a33      	ldr	r2, [pc, #204]	; (8000714 <init_spi_gpio+0x1a4>)
 8000646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800064a:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR10;
 800064c:	4b31      	ldr	r3, [pc, #196]	; (8000714 <init_spi_gpio+0x1a4>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	4a30      	ldr	r2, [pc, #192]	; (8000714 <init_spi_gpio+0x1a4>)
 8000652:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000656:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10;
 8000658:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <init_spi_gpio+0x1a4>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4a2d      	ldr	r2, [pc, #180]	; (8000714 <init_spi_gpio+0x1a4>)
 800065e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000662:	6093      	str	r3, [r2, #8]
	GPIOB->AFR[1] |= (0x5 << GPIO_AFRH_AFSEL10_Pos);
 8000664:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <init_spi_gpio+0x1a4>)
 8000666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000668:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <init_spi_gpio+0x1a4>)
 800066a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800066e:	6253      	str	r3, [r2, #36]	; 0x24
	/*PE7 - CS
	 Output mode
	 Push-pull
	 Very high speed
	 Pull-down*/
	GPIOE->MODER |= GPIO_MODER_MODE7_0;
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <init_spi_gpio+0x1a8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a28      	ldr	r2, [pc, #160]	; (8000718 <init_spi_gpio+0x1a8>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
	GPIOE->OTYPER &= ~GPIO_OTYPER_OT7;
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <init_spi_gpio+0x1a8>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a25      	ldr	r2, [pc, #148]	; (8000718 <init_spi_gpio+0x1a8>)
 8000682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000686:	6053      	str	r3, [r2, #4]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD7_1;
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <init_spi_gpio+0x1a8>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	4a22      	ldr	r2, [pc, #136]	; (8000718 <init_spi_gpio+0x1a8>)
 800068e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000692:	60d3      	str	r3, [r2, #12]
	GPIOE->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR7;
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <init_spi_gpio+0x1a8>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	4a1f      	ldr	r2, [pc, #124]	; (8000718 <init_spi_gpio+0x1a8>)
 800069a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069e:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <init_spi_gpio+0x1a8>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <init_spi_gpio+0x1a8>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6093      	str	r3, [r2, #8]
	CS_HIGH;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <init_spi_gpio+0x1a8>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a19      	ldr	r2, [pc, #100]	; (8000718 <init_spi_gpio+0x1a8>)
 80006b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b6:	6193      	str	r3, [r2, #24]
	/*PE9 - RST
	 Output mode
	 Push-pull
	 Very high speed
	 Pull-down*/
	GPIOE->MODER |= GPIO_MODER_MODE9_0;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <init_spi_gpio+0x1a8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a16      	ldr	r2, [pc, #88]	; (8000718 <init_spi_gpio+0x1a8>)
 80006be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006c2:	6013      	str	r3, [r2, #0]
	GPIOE->OTYPER &= ~GPIO_OTYPER_OT9;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <init_spi_gpio+0x1a8>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	4a13      	ldr	r2, [pc, #76]	; (8000718 <init_spi_gpio+0x1a8>)
 80006ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006ce:	6053      	str	r3, [r2, #4]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD9_1;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <init_spi_gpio+0x1a8>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	4a10      	ldr	r2, [pc, #64]	; (8000718 <init_spi_gpio+0x1a8>)
 80006d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006da:	60d3      	str	r3, [r2, #12]
	GPIOE->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR9;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <init_spi_gpio+0x1a8>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <init_spi_gpio+0x1a8>)
 80006e2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80006e6:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9;
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <init_spi_gpio+0x1a8>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <init_spi_gpio+0x1a8>)
 80006ee:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80006f2:	6093      	str	r3, [r2, #8]
	RST_ON;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <init_spi_gpio+0x1a8>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <init_spi_gpio+0x1a8>)
 80006fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006fe:	6193      	str	r3, [r2, #24]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40020800 	.word	0x40020800
 8000714:	40020400 	.word	0x40020400
 8000718:	40021000 	.word	0x40021000

0800071c <SPI_init>:

}


//MASTER_SPI2
void SPI_init(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

	init_spi_gpio();
 8000720:	f7ff ff26 	bl	8000570 <init_spi_gpio>
	//tick SPI bus & GPIOa
	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SPI_init+0xa0>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a24      	ldr	r2, [pc, #144]	; (80007bc <SPI_init+0xa0>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
	//APB1 = 42Mhz => /8 = 4Mhz
	SPI2->CR1 &= ~SPI_CR1_BR;
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SPI_init+0xa4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <SPI_init+0xa4>)
 8000736:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800073a:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_BR_1;
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <SPI_init+0xa4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <SPI_init+0xa4>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6013      	str	r3, [r2, #0]
	//Second front signal detect
	SPI2->CR1 |= SPI_CR1_CPHA;
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <SPI_init+0xa4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <SPI_init+0xa4>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_CPOL;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <SPI_init+0xa4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <SPI_init+0xa4>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	6013      	str	r3, [r2, #0]
	//Master
	SPI2->CR1 |= SPI_CR1_MSTR;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <SPI_init+0xa4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <SPI_init+0xa4>)
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	6013      	str	r3, [r2, #0]
	//Frame 16 bit
	SPI2->CR1 &= ~SPI_CR1_DFF;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <SPI_init+0xa4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <SPI_init+0xa4>)
 8000772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000776:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_DFF;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SPI_init+0xa4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <SPI_init+0xa4>)
 800077e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000782:	6013      	str	r3, [r2, #0]
	//Internal CS output
	SPI2->CR1 |= SPI_CR1_SSM;
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <SPI_init+0xa4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <SPI_init+0xa4>)
 800078a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800078e:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSI;
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <SPI_init+0xa4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <SPI_init+0xa4>)
 8000796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079a:	6013      	str	r3, [r2, #0]

	//Enb SPI
#if SPI_2_INTERRUPT_ENB
	NVIC_SetPriority(SPI2_IRQn, 5);
 800079c:	2105      	movs	r1, #5
 800079e:	2024      	movs	r0, #36	; 0x24
 80007a0:	f7ff fdf0 	bl	8000384 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI2_IRQn);
 80007a4:	2024      	movs	r0, #36	; 0x24
 80007a6:	f7ff fdb1 	bl	800030c <__NVIC_EnableIRQ>
#if SPI_2_INTERRUPT_DMA_ENB
	SPI2->CR2 |= SPI_CR2_RXDMAEN;
	SPI2->CR2 |= SPI_CR2_TXDMAEN;
	init_spi_dma();
#endif
	SPI2->CR1 |= SPI_CR1_SPE;
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <SPI_init+0xa4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <SPI_init+0xa4>)
 80007b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b4:	6013      	str	r3, [r2, #0]
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40003800 	.word	0x40003800

080007c4 <__NVIC_EnableIRQ>:
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	db0b      	blt.n	80007ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	f003 021f 	and.w	r2, r3, #31
 80007dc:	4907      	ldr	r1, [pc, #28]	; (80007fc <__NVIC_EnableIRQ+0x38>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	2001      	movs	r0, #1
 80007e6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000e100 	.word	0xe000e100

08000800 <__NVIC_ClearPendingIRQ>:
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	2b00      	cmp	r3, #0
 8000810:	db0c      	blt.n	800082c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f003 021f 	and.w	r2, r3, #31
 8000818:	4907      	ldr	r1, [pc, #28]	; (8000838 <__NVIC_ClearPendingIRQ+0x38>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	095b      	lsrs	r3, r3, #5
 8000820:	2001      	movs	r0, #1
 8000822:	fa00 f202 	lsl.w	r2, r0, r2
 8000826:	3360      	adds	r3, #96	; 0x60
 8000828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100

0800083c <oneSec_timer_init>:
void SPI_16BitTxRx(const uint8_t address, const int16_t data, uint16_t *RxData);
void SPI_DMA_SendData(const uint8_t address, const int16_t *data);


/***********************************************TIM_6 = 1sec*/
void oneSec_timer_init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <oneSec_timer_init+0x50>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a11      	ldr	r2, [pc, #68]	; (800088c <oneSec_timer_init+0x50>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
	TIM6->CR1 &= ~TIM_CR1_CEN;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <oneSec_timer_init+0x54>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <oneSec_timer_init+0x54>)
 8000852:	f023 0301 	bic.w	r3, r3, #1
 8000856:	6013      	str	r3, [r2, #0]
	//1s = 1Hz
	TIM6->PSC = 1343;
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <oneSec_timer_init+0x54>)
 800085a:	f240 523f 	movw	r2, #1343	; 0x53f
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = 62499;
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <oneSec_timer_init+0x54>)
 8000862:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->DIER |= TIM_DIER_UIE;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <oneSec_timer_init+0x54>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4a08      	ldr	r2, [pc, #32]	; (8000890 <oneSec_timer_init+0x54>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <oneSec_timer_init+0x54>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <oneSec_timer_init+0x54>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000880:	2036      	movs	r0, #54	; 0x36
 8000882:	f7ff ff9f 	bl	80007c4 <__NVIC_EnableIRQ>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40001000 	.word	0x40001000

08000894 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	if (TIM6->SR & TIM_SR_UIF) {
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <TIM6_DAC_IRQHandler+0x50>)
 800089a:	691b      	ldr	r3, [r3, #16]
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d01d      	beq.n	80008e0 <TIM6_DAC_IRQHandler+0x4c>

#if SPI_2_INTERRUPT_ENB
		SPI2->CR2 |= SPI_CR2_TXEIE;
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <TIM6_DAC_IRQHandler+0x54>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <TIM6_DAC_IRQHandler+0x54>)
 80008aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ae:	6053      	str	r3, [r2, #4]
		spi_rx_complete = 0;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <TIM6_DAC_IRQHandler+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
		bufferOUT[0] = ADDR_0X30;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <TIM6_DAC_IRQHandler+0x5c>)
 80008b8:	2230      	movs	r2, #48	; 0x30
 80008ba:	801a      	strh	r2, [r3, #0]
#elif SPI_2_INTERRUPT_DMA_ENB
	    SPI_DMA_SendData(ADDR_0X30, bufferOUT);
#else
		SPI_16BitTxRx(ADDR_0X30, bufferOUT[1], bufferIN);
#endif
		NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
 80008bc:	2036      	movs	r0, #54	; 0x36
 80008be:	f7ff ff9f 	bl	8000800 <__NVIC_ClearPendingIRQ>
		TIM6->SR &= ~TIM_SR_UIF;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <TIM6_DAC_IRQHandler+0x50>)
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <TIM6_DAC_IRQHandler+0x50>)
 80008c8:	f023 0301 	bic.w	r3, r3, #1
 80008cc:	6113      	str	r3, [r2, #16]
		TIM7->CNT = 0;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <TIM6_DAC_IRQHandler+0x60>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
		TIM7->CR1 |= TIM_CR1_CEN;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <TIM6_DAC_IRQHandler+0x60>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <TIM6_DAC_IRQHandler+0x60>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6013      	str	r3, [r2, #0]
	}
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40001000 	.word	0x40001000
 80008e8:	40003800 	.word	0x40003800
 80008ec:	20000028 	.word	0x20000028
 80008f0:	20000004 	.word	0x20000004
 80008f4:	40001400 	.word	0x40001400

080008f8 <check200ms_timer_init>:
/***********************************************TIM_7 = 200ms*/
void check200ms_timer_init(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <check200ms_timer_init+0x44>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <check200ms_timer_init+0x44>)
 8000902:	f043 0320 	orr.w	r3, r3, #32
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
	TIM7->CR1 &= ~TIM_CR1_CEN;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <check200ms_timer_init+0x48>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <check200ms_timer_init+0x48>)
 800090e:	f023 0301 	bic.w	r3, r3, #1
 8000912:	6013      	str	r3, [r2, #0]
	//200 ms
	TIM7->PSC = 335;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <check200ms_timer_init+0x48>)
 8000916:	f240 124f 	movw	r2, #335	; 0x14f
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM7->ARR = 49999;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <check200ms_timer_init+0x48>)
 800091e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM7->DIER |= TIM_DIER_UIE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <check200ms_timer_init+0x48>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4a05      	ldr	r2, [pc, #20]	; (8000940 <check200ms_timer_init+0x48>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM7_IRQn);
 8000930:	2037      	movs	r0, #55	; 0x37
 8000932:	f7ff ff47 	bl	80007c4 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40001400 	.word	0x40001400

08000944 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	if (TIM7->SR & TIM_SR_UIF) {
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <TIM7_IRQHandler+0x68>)
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	2b00      	cmp	r3, #0
 8000952:	d01a      	beq.n	800098a <TIM7_IRQHandler+0x46>
		switch (bufferIN[0]) {
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <TIM7_IRQHandler+0x6c>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	2b20      	cmp	r3, #32
 800095a:	d107      	bne.n	800096c <TIM7_IRQHandler+0x28>
			case ADDR_0X20:
				if (bufferIN[1])
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <TIM7_IRQHandler+0x6c>)
 800095e:	885b      	ldrh	r3, [r3, #2]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d005      	beq.n	8000970 <TIM7_IRQHandler+0x2c>
#if SPI_2_INTERRUPT_DMA_ENB
					bufferOUT[0] = 0xFF;
#else
					bufferOUT[1] = 0xFF;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <TIM7_IRQHandler+0x70>)
 8000966:	22ff      	movs	r2, #255	; 0xff
 8000968:	805a      	strh	r2, [r3, #2]
#endif
				break;
 800096a:	e001      	b.n	8000970 <TIM7_IRQHandler+0x2c>
			default:
				break;
 800096c:	bf00      	nop
 800096e:	e000      	b.n	8000972 <TIM7_IRQHandler+0x2e>
				break;
 8000970:	bf00      	nop
		}
		spi_rx_complete = 0;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <TIM7_IRQHandler+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
		rx_counter = 0;
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <TIM7_IRQHandler+0x78>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
		CS_HIGH;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <TIM7_IRQHandler+0x7c>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <TIM7_IRQHandler+0x7c>)
 8000984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000988:	6193      	str	r3, [r2, #24]
	}
	NVIC_ClearPendingIRQ(TIM7_IRQn);
 800098a:	2037      	movs	r0, #55	; 0x37
 800098c:	f7ff ff38 	bl	8000800 <__NVIC_ClearPendingIRQ>
	TIM7->SR &= ~TIM_SR_UIF;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <TIM7_IRQHandler+0x68>)
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	4a05      	ldr	r2, [pc, #20]	; (80009ac <TIM7_IRQHandler+0x68>)
 8000996:	f023 0301 	bic.w	r3, r3, #1
 800099a:	6113      	str	r3, [r2, #16]
	TIM7->CR1 &= ~TIM_CR1_CEN;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <TIM7_IRQHandler+0x68>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a02      	ldr	r2, [pc, #8]	; (80009ac <TIM7_IRQHandler+0x68>)
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40001400 	.word	0x40001400
 80009b0:	20000024 	.word	0x20000024
 80009b4:	20000004 	.word	0x20000004
 80009b8:	20000028 	.word	0x20000028
 80009bc:	20000029 	.word	0x20000029
 80009c0:	40021000 	.word	0x40021000

080009c4 <main>:

/************************************************************************MAIN*/
int main(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
    system_clock_168m_25m_hse();
 80009c8:	f000 f810 	bl	80009ec <system_clock_168m_25m_hse>

    debug_usart_init();
 80009cc:	f000 f8b2 	bl	8000b34 <debug_usart_init>
    bufferOUT[0] = 0x55;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <main+0x24>)
 80009d2:	2255      	movs	r2, #85	; 0x55
 80009d4:	801a      	strh	r2, [r3, #0]
    oneSec_timer_init();
 80009d6:	f7ff ff31 	bl	800083c <oneSec_timer_init>
    check200ms_timer_init();
 80009da:	f7ff ff8d 	bl	80008f8 <check200ms_timer_init>
    SPI_init();
 80009de:	f7ff fe9d 	bl	800071c <SPI_init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80009e2:	b662      	cpsie	i
}
 80009e4:	bf00      	nop
    __enable_irq();

	while (1){
 80009e6:	e7fe      	b.n	80009e6 <main+0x22>
 80009e8:	20000004 	.word	0x20000004

080009ec <system_clock_168m_25m_hse>:
#include "stm32f4xx.h"

void system_clock_168m_25m_hse(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
    uint32_t timeout = 0U;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
    uint32_t stab_flag = 0U;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
    
    /* enable HSE */
    SET_BIT(RCC->CR, RCC_CR_HSEON);
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a3a      	ldr	r2, [pc, #232]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a04:	6013      	str	r3, [r2, #0]

    /* wait until HSE is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
        stab_flag = READ_BIT(RCC->CR, RCC_CR_HSERDY);
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a14:	613b      	str	r3, [r7, #16]
    }while((0U == stab_flag) && (0xFFFF != timeout));
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d104      	bne.n	8000a26 <system_clock_168m_25m_hse+0x3a>
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d1ef      	bne.n	8000a06 <system_clock_168m_25m_hse+0x1a>

    /* if fail */
    if(0U == READ_BIT(RCC->CR, RCC_CR_HSERDY)){
 8000a26:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d100      	bne.n	8000a34 <system_clock_168m_25m_hse+0x48>
        while(1){
 8000a32:	e7fe      	b.n	8000a32 <system_clock_168m_25m_hse+0x46>
        }
    }
    
    /* Flash access (read RM0090) */
    FLASH->ACR |= FLASH_ACR_LATENCY_5WS | FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN;
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <system_clock_168m_25m_hse+0x100>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a2c      	ldr	r2, [pc, #176]	; (8000aec <system_clock_168m_25m_hse+0x100>)
 8000a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a3e:	f043 0305 	orr.w	r3, r3, #5
 8000a42:	6013      	str	r3, [r2, #0]

    /* Enable APB1 */
    SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
    SET_BIT(PWR->CR, PWR_CR_VOS);
 8000a50:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <system_clock_168m_25m_hse+0x104>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a26      	ldr	r2, [pc, #152]	; (8000af0 <system_clock_168m_25m_hse+0x104>)
 8000a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5a:	6013      	str	r3, [r2, #0]

    /* HSE is stable */
    /* AHB = SYSCLK = 168 MHz */
    /* APB2 = AHB/2 = 84 MHz */
    /* APB1 = AHB/4 = 42 MHz */
    SET_BIT(RCC->CFGR, RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE2_DIV2 | RCC_CFGR_PPRE1_DIV4);
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000a62:	f443 4314 	orr.w	r3, r3, #37888	; 0x9400
 8000a66:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL, PSC = 25, PLL_N = 336, PLL_P = 2 (set to PLLP = 00), PLL_Q = 7 */ 
    uint32_t PLLM = 25 << RCC_PLLCFGR_PLLM_Pos;
 8000a68:	2319      	movs	r3, #25
 8000a6a:	60fb      	str	r3, [r7, #12]
    uint32_t PLLN = 336 << RCC_PLLCFGR_PLLN_Pos;
 8000a6c:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8000a70:	60bb      	str	r3, [r7, #8]
    uint32_t PLLP = 0 << RCC_PLLCFGR_PLLP_Pos;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
    uint32_t PLLQ = 7 << RCC_PLLCFGR_PLLQ_Pos;
 8000a76:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8000a7a:	603b      	str	r3, [r7, #0]
    SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC_HSE);
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000a82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a86:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->PLLCFGR,
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <system_clock_168m_25m_hse+0x108>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	68f9      	ldr	r1, [r7, #12]
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	4311      	orrs	r1, r2
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	4912      	ldr	r1, [pc, #72]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	604b      	str	r3, [r1, #4]
               RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk,
               PLLM | PLLN | PLLP | PLLQ);
    
    /* enable PLL */
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aae:	6013      	str	r3, [r2, #0]

    /* wait until PLL is stable */
    while(0U == READ_BIT(RCC->CR, RCC_CR_PLLRDY)){
 8000ab0:	bf00      	nop
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0f9      	beq.n	8000ab2 <system_clock_168m_25m_hse+0xc6>
    }
    
    /* select PLL as system clock */
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_Msk, RCC_CFGR_SW_PLL);
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f023 0303 	bic.w	r3, r3, #3
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6093      	str	r3, [r2, #8]
    
    /* wait until PLL is selected as system clock */
    while(RCC_CFGR_SWS_PLL != (RCC->CFGR & RCC_CFGR_SWS_Msk) ){
 8000ace:	bf00      	nop
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <system_clock_168m_25m_hse+0xfc>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 030c 	and.w	r3, r3, #12
 8000ad8:	2b08      	cmp	r3, #8
 8000ada:	d1f9      	bne.n	8000ad0 <system_clock_168m_25m_hse+0xe4>
    }

    SystemCoreClockUpdate();
 8000adc:	f7ff fb96 	bl	800020c <SystemCoreClockUpdate>
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40023c00 	.word	0x40023c00
 8000af0:	40007000 	.word	0x40007000
 8000af4:	f0fc8000 	.word	0xf0fc8000

08000af8 <__NVIC_EnableIRQ>:
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <debug_usart_init>:
#include "stm32f4xx.h"

void debug_usart_init(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* Using USART1 on PA9, PA10, tx only in polling mode (no interrupts) */

  /* Enable PORT E clock */
  SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <debug_usart_init+0x90>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <debug_usart_init+0x90>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
  // TX - PA9, AF7
  SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <debug_usart_init+0x94>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <debug_usart_init+0x94>)
 8000b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b4e:	6013      	str	r3, [r2, #0]
  SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0 | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2);
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <debug_usart_init+0x94>)
 8000b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b54:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <debug_usart_init+0x94>)
 8000b56:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000b5a:	6253      	str	r3, [r2, #36]	; 0x24
  // RX - PA10, AF7
  SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <debug_usart_init+0x94>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <debug_usart_init+0x94>)
 8000b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b66:	6013      	str	r3, [r2, #0]
  SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2);
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <debug_usart_init+0x94>)
 8000b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6c:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <debug_usart_init+0x94>)
 8000b6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000b72:	6253      	str	r3, [r2, #36]	; 0x24

  // Init USART1 module
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN);
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <debug_usart_init+0x90>)
 8000b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b78:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <debug_usart_init+0x90>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6453      	str	r3, [r2, #68]	; 0x44
  /*TX/RX_baundrate = (84MHz / 16)/115200 = 45.57; 45 = 0x2D; 57 = 0x9*/
  USART1->BRR = 0x2D9;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <debug_usart_init+0x98>)
 8000b82:	f240 22d9 	movw	r2, #729	; 0x2d9
 8000b86:	609a      	str	r2, [r3, #8]

  // Tx enable
  SET_BIT(USART1->CR1, USART_CR1_TE);
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <debug_usart_init+0x98>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <debug_usart_init+0x98>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	60d3      	str	r3, [r2, #12]
//  SET_BIT(USART1->CR1, USART_CR1_TCIE);
  // 8 bit, no parity, 1 stop
  CLEAR_BIT(USART1->CR1, USART_CR1_M | USART_CR1_PCE);
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <debug_usart_init+0x98>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <debug_usart_init+0x98>)
 8000b9a:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8000b9e:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(USART1->CR2, USART_CR2_STOP);
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <debug_usart_init+0x98>)
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <debug_usart_init+0x98>)
 8000ba6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000baa:	6113      	str	r3, [r2, #16]

  //Enb interrupt & USART
  NVIC_EnableIRQ(USART1_IRQn);
 8000bac:	2025      	movs	r0, #37	; 0x25
 8000bae:	f7ff ffa3 	bl	8000af8 <__NVIC_EnableIRQ>
  // enable USART
  SET_BIT(USART1->CR1, USART_CR1_UE);
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <debug_usart_init+0x98>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <debug_usart_init+0x98>)
 8000bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bbc:	60d3      	str	r3, [r2, #12]
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40011000 	.word	0x40011000

08000bd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd4:	f7ff fb08 	bl	80001e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	; (8000c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <LoopForever+0xe>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	; (8000c1c <LoopForever+0x16>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bfe:	f000 f811 	bl	8000c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c02:	f7ff fedf 	bl	80009c4 <main>

08000c06 <LoopForever>:

LoopForever:
  b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   r0, =_estack
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000c14:	08000c9c 	.word	0x08000c9c
  ldr r2, =_sbss
 8000c18:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000c1c:	2000002c 	.word	0x2000002c

08000c20 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <__libc_init_array>:
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	4d0d      	ldr	r5, [pc, #52]	; (8000c5c <__libc_init_array+0x38>)
 8000c28:	4c0d      	ldr	r4, [pc, #52]	; (8000c60 <__libc_init_array+0x3c>)
 8000c2a:	1b64      	subs	r4, r4, r5
 8000c2c:	10a4      	asrs	r4, r4, #2
 8000c2e:	2600      	movs	r6, #0
 8000c30:	42a6      	cmp	r6, r4
 8000c32:	d109      	bne.n	8000c48 <__libc_init_array+0x24>
 8000c34:	4d0b      	ldr	r5, [pc, #44]	; (8000c64 <__libc_init_array+0x40>)
 8000c36:	4c0c      	ldr	r4, [pc, #48]	; (8000c68 <__libc_init_array+0x44>)
 8000c38:	f000 f818 	bl	8000c6c <_init>
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	10a4      	asrs	r4, r4, #2
 8000c40:	2600      	movs	r6, #0
 8000c42:	42a6      	cmp	r6, r4
 8000c44:	d105      	bne.n	8000c52 <__libc_init_array+0x2e>
 8000c46:	bd70      	pop	{r4, r5, r6, pc}
 8000c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c4c:	4798      	blx	r3
 8000c4e:	3601      	adds	r6, #1
 8000c50:	e7ee      	b.n	8000c30 <__libc_init_array+0xc>
 8000c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c56:	4798      	blx	r3
 8000c58:	3601      	adds	r6, #1
 8000c5a:	e7f2      	b.n	8000c42 <__libc_init_array+0x1e>
 8000c5c:	08000c94 	.word	0x08000c94
 8000c60:	08000c94 	.word	0x08000c94
 8000c64:	08000c94 	.word	0x08000c94
 8000c68:	08000c98 	.word	0x08000c98

08000c6c <_init>:
 8000c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6e:	bf00      	nop
 8000c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c72:	bc08      	pop	{r3}
 8000c74:	469e      	mov	lr, r3
 8000c76:	4770      	bx	lr

08000c78 <_fini>:
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7a:	bf00      	nop
 8000c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7e:	bc08      	pop	{r3}
 8000c80:	469e      	mov	lr, r3
 8000c82:	4770      	bx	lr
